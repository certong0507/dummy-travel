{"version":3,"file":"static/js/3357.e09a4a7d.chunk.js","mappings":"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","sources":["components/footer/copyright.js","components/inputs/InputTableTextControl.js","pages/reset_password/components/schema/Schema.js","pages/reset_password/ResetPassword.js","../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","../node_modules/@hookform/resolvers/src/toNestError.ts","../node_modules/@hookform/resolvers/yup/src/yup.ts"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nexport default function Copyright() {\n    return (\n        <div id=\"footer\" className=\"copyright-area copyright-style-one\">\n            <div className=\"container\">\n                <div className=\"row align-items-center\">\n                    <div className=\"col-lg-6 col-md-8 col-sm-12 col-12\">\n                        <div className=\"copyright-left\">\n                            <ul className=\"ft-menu link-hover\">\n                                <li>\n                                    <Link to=\"/privacy-policy\">\n                                        <span>Privacy Policy</span>\n                                    </Link>\n                                </li>\n                                <li>\n                                    <Link to=\"/term-and-condition\">\n                                        <span>Terms And Condition</span>\n                                    </Link>\n                                </li>\n                                <li>\n                                    <a href=\"#/contact-us\">Contact Us</a>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-6 col-md-4 col-sm-12 col-12\">\n                        <div className=\"copyright-right text-center text-md-end\">\n                            <p className=\"copyright-text\">\n                                Copyright Â© {new Date().getFullYear()} Untung 1\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { styled } from \"@mui/material/styles\"\nimport TextField from \"@mui/material/TextField\"\nimport { Controller } from \"react-hook-form\"\n\nimport { NumberFormatter, NumberFormatterLeadingZeros } from \"src/utils/functions\"\n\nconst InputTableTextControl = styled(\n    ({ control, name, label, defaultValue, number, onBlur, leadingZeros, ...props }) => (\n        <>\n            <Controller\n                control={control}\n                name={name}\n                defaultValue={defaultValue || \"\"}\n                render={({ field: { onChange, value }, fieldState: { invalid, error } }) => (\n                    <TextField\n                        required\n                        fullWidth\n                        label={label}\n                        size=\"small\"\n                        onChange={onChange}\n                        onBlur={onBlur}\n                        value={value}\n                        error={invalid}\n                        helperText={error?.message || \" \"}\n                        autoComplete=\"no\"\n                        InputLabelProps={{\n                            style: {\n                                color: \"#CCCCCC\",\n                            },\n                        }}\n                        InputProps={{\n                            autoComplete: \"off\",\n                            form: {\n                                autocomplete: \"off\",\n                            },\n                            inputComponent: number\n                                ? leadingZeros\n                                    ? NumberFormatterLeadingZeros\n                                    : NumberFormatter\n                                : null,\n                        }}\n                        FormHelperTextProps={{\n                            className: \"mt-0\",\n                        }}\n                        {...props}\n                    />\n                )}\n            />\n        </>\n    ),\n)(({ theme }) => ({\n    \".MuiInputLabel-root.Mui-error\": {\n        color: \"rgb(239, 83, 80) !important\",\n    },\n    \".MuiInputLabel-shrink.Mui-focused.Mui-error\": {\n        color: \"rgb(239, 83, 80) !important\",\n    },\n    \".MuiInputLabel-shrink.Mui-focused\": {\n        color: \"#009C99 !important\",\n    },\n    \".MuiOutlinedInput-notchedOutline\": {\n        transition: \"0.3s\",\n        legend: {\n            float: \"unset\",\n            overflow: \"hidden\",\n            display: \"block\",\n            width: \"auto\",\n            padding: 0,\n            height: \"11px\",\n            fontSize: \"0.75em\",\n            visibility: \"hidden\",\n            transition: \"max-width 100ms cubic-bezier(0.0, 0, 0.2, 1) 50ms\",\n            whiteSpace: \"nowrap\",\n        },\n    },\n}))\n\nexport default InputTableTextControl\n","import * as yup from \"yup\"\n\nconst Schema = yup\n    .object()\n    .shape({\n        password: yup.string().required(\"Field is required.\")\n        .min(8, 'Password must be at least 8 characters'),\n        confirmPassword: yup.string()\n        .required('Field is required.')\n        .oneOf([yup.ref('password')], 'Passwords does not match'),\n    })\n    .required();\n\nexport default Schema\n","import React, { useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport Box from \"@mui/material/Box\"\nimport Card from \"@mui/material/Card\"\nimport CardContent from \"@mui/material/CardContent\"\nimport Typography from \"@mui/material/Typography\"\nimport Button from \"@mui/material/Button\"\nimport { useForm } from \"react-hook-form\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { useSearchParams } from \"react-router-dom\"\nimport { useNavigate } from \"react-router-dom\"\n\nimport Header from \"src/components/header\"\nimport Footer from \"src/components/footer/copyright\"\nimport Schema from \"src/pages/reset_password/components/schema/Schema\"\nimport InputTableTextControl from \"src/components/inputs/InputTableTextControl\"\nimport { doResetPassword, resetForgotPasswordState } from \"src/action/api_actions\"\n\nconst ResetPassword = ({\n    doResetPassword,\n    resetForgotPasswordState,\n    success,\n    fail,\n    errorDetailData,\n}) => {\n    const navigate = useNavigate()\n    const [searchParams, setSearchParams] = useSearchParams()\n    const { control, handleSubmit, getValues } = useForm({\n        defaultValues: {\n            password: \"\",\n            confirmPassword: \"\",\n        },\n        resolver: yupResolver(Schema),\n        mode: \"all\",\n    })\n\n    useEffect(() => {\n        resetForgotPasswordState()\n    }, [])\n\n    useEffect(() => {\n        if (success) {\n            navigate(\"/reset-password-success\")\n        }\n    }, [success])\n\n    useEffect(() => {\n        if (fail) {\n            navigate(\"/reset-password-fail\")\n        }\n    }, [fail])\n\n    const handleReset = () => {\n        const password = getValues(\"confirmPassword\")\n        const token = searchParams.get(\"t\")\n\n        doResetPassword({ password, token })\n    }\n\n    return (\n        <>\n            <Header />\n\n            <Box\n                className=\"d-flex\"\n                sx={{\n                    height: \"90vh\",\n                    backgroundColor: \"rgb(237, 247, 237)\",\n                    p: 5,\n                }}\n            >\n                <Card variant=\"outlined\" className=\"m-auto p-2\" sx={{ minWidth: \"40%\" }}>\n                    <CardContent>\n                        <div className=\"d-flex justify-content-center\">\n                            <Typography variant=\"h6\" className=\"mb-4\">\n                                Reset Password\n                            </Typography>\n                        </div>\n\n                        <div className=\"text-center\">\n                            <InputTableTextControl\n                                control={control}\n                                name=\"password\"\n                                label=\"New Password\"\n                                type=\"password\"\n                            />\n\n                            <InputTableTextControl\n                                control={control}\n                                name=\"confirmPassword\"\n                                label=\"Confirm Password\"\n                                type=\"password\"\n                            />\n\n                            <Button\n                                disableElevation\n                                variant=\"contained\"\n                                className=\"mt-3 \"\n                                onClick={handleSubmit(handleReset)}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </CardContent>\n                </Card>\n            </Box>\n\n            <Footer />\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    success: state.forgotPassword.success,\n    fail: state.forgotPassword.fail,\n    errorDetailData: state.forgotPassword.errorDetailData,\n})\n\nconst mapDispatchToProps = {\n    doResetPassword,\n    resetForgotPasswordState,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPassword)\n","import {\n  get, FieldError, ResolverOptions, Ref\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: Record<string, FieldError>) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldError,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n","import Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"],"names":["Copyright","id","className","to","href","Date","getFullYear","InputTableTextControl","styled","control","name","label","defaultValue","number","onBlur","leadingZeros","props","render","field","onChange","value","fieldState","invalid","error","required","fullWidth","size","helperText","message","autoComplete","InputLabelProps","style","color","InputProps","form","autocomplete","inputComponent","NumberFormatterLeadingZeros","NumberFormatter","FormHelperTextProps","theme","transition","legend","float","overflow","display","width","padding","height","fontSize","visibility","whiteSpace","yup","shape","password","min","confirmPassword","oneOf","mapDispatchToProps","doResetPassword","resetForgotPasswordState","connect","state","success","forgotPassword","fail","errorDetailData","navigate","useNavigate","useSearchParams","searchParams","useForm","defaultValues","resolver","yupResolver","Schema","mode","handleSubmit","getValues","useEffect","Box","sx","backgroundColor","p","Card","variant","minWidth","CardContent","Typography","type","Button","disableElevation","onClick","token","get","setCustomValidity","ref","fieldPath","errors","reportValidity","validateFieldsNatively","options","fields","refs","forEach","toNestError","shouldUseNativeValidation","fieldErrors","path","set","Object","assign","schema","schemaOptions","resolverOptions","values","context","Promise","abortEarly","result","e","inner","validateAllFieldCriteria","criteriaMode","reduce","previous","types","messages","appendErrors","concat"],"sourceRoot":""}